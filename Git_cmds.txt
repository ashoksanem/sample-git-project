git init

--->In git we can configure user details (mail address) in 3 ways
      Repository level (local)  gitrepo/.git/config
      user account (global)     users/user_name/.gitconfig
      system level (git installation)  /usr/local/etc/gitconfig
  


git config  user.email ---> to check which already configure mail ID
git config  user.name  ---> to check which already configure name

git config --list --show-origin

git config  --local user.email  <mail> ---> to set user mail locally @repo level
git config  --local user.name  <name> ---> to set user name locally @repo level

git config --local --unset  user.name      ---> to unset user mail locally @repo level
git config --local --unset  user.email     ---> to unset user name locally @repo level
git config --local --remove-section user   ----> to remove username & mail section in .git/config

git config --unset  user.name
git config --unset  user.email


git config --global --unset  user.name  ---> to unset user name locally @global level
git config --global --unset  user.email
git config --global --remove-section user


Git has 4 object types in GIT BLOB TREE COMMIT ANNOTATED-TAG 

 -In Blob git stores files, git blob will not store file names 
 -In Tree git store information about directories. Tree can contain set of info of directories or midex with Blobs 
 -In Commit git stores the versions of project/files.commit is sha hash code mainly contains Author Name & Email,Commit Description, Parent commit
 -In Annotated Tags its persistent text pointer to specific commit 

For managenment for Blobs & Trees we use low level cmds
git hash-object  to create new object in git structure 
  
    echo "hello,git" | git  hash-object --stdin  it only displays hash code for the input but no blob file will be created in .git/object
     4309cccf7c051ee6307bc3bbf124b1dbaf913850

    echo "hello,git" | git git hash-object --stdin -w  it displays hash code for the input also blob file will be created in .git/object/43/09cccf7c051ee63  where folder will created with first 2 digits of the hash code & object will be created inside it with rest for the hash code 

git cat-file -p    to print contents of git object
   git cat-file -p 4309cccf7c051ee6307bc3bbf124b1dbaf913850
     hello,git

git cat-file -s  to print size of git object in bites
  git cat-file -s 4309cccf7c051ee6307bc3bbf124b1dbaf913850
  10
  
git cat-file -t  to print type of git object
   git cat-file -t 4309cccf7c051ee6307bc3bbf124b1dbaf913850
   blob


There are 4 file tracking status in git
 Untracked Modified     Staged      Unmodified
  [working area]       [index]    [commited/repo]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git add <file> ----> to add a pictular untracked/modified file from working area to staging

git add .  ----> to add all untracked/modified files to staging

git commit -m "<your commmit msg> ----> to commit files

git commit -am "<your commmit msg> ----> direct commit files without adding to staging

git ls-files  -s ---> shows the files & their permissions which are only stagged but not under working area  

git rm --cached <file>  ---> to unstage, after first movenment of file from working area to staging

git rm <file name> ----> git delete the file & move that to staging

git status

git log  ---> to check git history

git log --oneline   ----> history in oneline

git diff ------> to check file changes between working & staging  

git diff --staged ----> to check file changes between staging & repository/commit

git diff HEAD  -----> to check file changes between repository/commit & working
    or 
git diff --cached ---> works similar to command "git diff HEAD" but shows the file changes in previous commit & present staging

git cat-file 3ba8ba28eacb53fe983fee39298e4d5f88e4087a  -p  -----> to read the contents of the commited file using its hash code which is formed during commit

git mv  <old_file_name>   <new_file_name>  -----> to rename file, after rename git automatically move new renamed file to staging
                                                                    or 
git mv  ./<old_file_name>   dir/<new_file_name>  -----> to move a file from one location to other within same repository without making any changes in it.after moving git directely move the file to staging

git restore --staged <file>  ----> to unstage, Git automatically move file from staging to working state

git restore <file> ----> to undo from working state, Git automatically move file from working state/modified/untracked to normal. All the changes made on the file in working state will be reverted  

git checkout -b <new branch name> -----> to create new branch & to enter into that newly created branch

git branch -----> to list out the branch & present working branch

git checkout <branch name> -----> to enter into pictular branch

.git/refs/heads/          ------> location of branchs, whenever we create a branch a file with same branch name will be created in this location 

git branch <branch name>  ------> it will create new branch but you will remain in the same branch from where you have created it

cat .git/refs/heads/<branch name> ----> gives you the hash code which tells you the latest commit on the branch, Also we can find out from which commit a branch has been created

cat .git/HEAD  ----> to know to which branch currentley git reffernching or to know in which branch we are in currentely 

git branch -m <old_branch_name>  <new_branch_name>  -----> to rename the branch 

git branch -m <new_branch> -----> to rename current working branch 

git branch -d  <branch_name> -----> to delete branch, remember you cannot delete the current working branch. in order to delete first you have to move to some other branch & later perform branch delete you wished
                                    Note: Dont delete the branch if you have commits in it, if you do that the Head will reffer to detached Head which is not recomemded for this to achive first you have to merge 
                                          the branch with other (master) or create a new branch & merge with it & later perform branch delete 

git branch -D  <branch_name> -----> forcefully delete branch
 
------------------Git Merge---------------------------------------------------------------------------------------------------------------------
Target = master Source = feature-1

if we want to merge Source into Target 
   - first checkout into Target (master)
   - git merge feature-1 (then files in the source will get merged into master & Head will be pointed towards master, in simple master will contain both the files of source & target)  

Merge Types:
Fast Forward Merge - when Target or Source any one doesnt have any new commits (or) its clear without any merge conflicts (or) the branch doesnt contain any commits/empty branch then Fast Forward merge will be performed automatically  

Recursive Merge - just oppsite to Fast Forward merge


if Target = master  has new commits &  Source = feature-1  with old commits, in this case master is few steps ahead compared with source
    then if we perform "git merge master" by checking into Source in this case git performs Fast Forward Merge & Head will pointed to master but not to Source because Master has lastet commits when compared with Source 
    if both branches has latest commits then Recursive Merge will be occured & Head will be pointed to master as expected.

git merge conflicts arrised when you have modified & commited same files & same lines in the file in two different branches (Target, Source) then merge conflicts occur 
at that time git merge the contents of the file & will keep the files as modified in working state,same time we have to edit the files & decied which lines has to be retained,deleted after that we have to commit that file after staging, then it results to succesfull merge

 
git merge --abort ---> this cmd generally used to abort merge, recommended to use in merge conflicts , this cmd doesnt work/effecte when you have to abort as succesfull merge, because when we check git log at that moment git will point its HEAD both towards merged branches resulting that it cannot decide on which branch the operation/cmd has to be executed & thus fails   
                       when merge conflicts arrises use this cmd to cancel/abort that merge, then edit files & do your corrections/modifications in the files & commit them in their respective branches & then perform merge this time make sure that merge conflicts should not arrises during merging of branches 

------------------Git Rebase-------------------------------------------------------------------------------------------------------------------------
Target = master Source = feature-1

- Rebase uses merge strategy, if you apply rebase on a branch (git rebase feature-1) then it will apply commits of one branch on top of the commits of other branch as its own branch commits
- in the case git rebase feature-1, master branch commits will be moved on the top followed by feature-1, when we check git log in master we can see the commmits of master first, followed by 
  feature-1 branch commits combiend in master as its own commits.
- Rebase is used to clean up loacal commit histoy
- Rebase doesnt preserve history whereas Merge does
- cleaning up your commits before sharing your branch, pulling changes from other branch without mearge are the  common places to use REBASE
- When REBASE conflicts arises which will be same as merge conflits, reslove the conflict & commit it like same as we do to reslove merge conflicts 
- Below are the Hints provided by git when merge conflicts arises during rebase

Hints when conflicts arises
     
      hint: Resolve all conflicts manually, mark them as resolved with
      hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
      hint: You can instead skip this commit: run "git rebase --skip".
      hint: To abort and get back to the state before "git rebase", run "git rebase --abort" 

--git rebase -i <hash code of commit>  
  - its an interactive rebase where we can merge the all the commits into single commit, generally used to cleanup the commit history of the same branch before merging into MASTER

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git show <commit hash> ---> it shows the changes made in the files in that pictular commit

git commit --amend ---------> this cmd used when you had made some mistakes in the file & accidentally commited it & you want make the corrections with out new commit or you want to append this new changes to previous commit
                          1. make necessary corrections in the file you want to do, now the file will be in working/modified state 
                          2. move the file to staging (git add .)
                          3. now perform "git commit --amend" this will open the interactive terminal where previous commit message will be shown, if you want to change the commit msg then change it else keep it same
                             so that you can observe this new file changes will be appended or added to previous commit with out performing new commit with the commit msg you have given  

---------------------------cherry pick-------------------------------------------------------------------------------------------------------------------------------------
- cherry pick is used if you want to apply one or more pictular commits from one branch into another branch
- cherry pick is mainly used if you dont want to merge the whole branch but only you need some commits
- it is just like rebase but advanced concept & also powerful cmd
- it can cause duplicate commits. it is usefull but not good option
- mainly used for bug fixes where you want to apply that bugfix commit in all branch versions
- it can be used when we accidentally made a commit in wrong branch

  1. copy pictular commit hash from the branch you needed  ex: feature-2
  2. checkout to branch where you want to apply that pictular commit  ex: feature-1
  3. git cherry-pick <copied commit hash> 
  4. you can observer the commit which you picked from feature-2 that commit will be applied on feature-1
  
Hints when conflicts arises

  hint: After resolving the conflicts, mark them with
  hint: "git add/rm <pathspec>", then run
  hint: "git cherry-pick --continue".
  hint: You can instead skip this commit with "git cherry-pick --skip".
  hint: To abort and get back to the state before "git cherry-pick",
  hint: run "git cherry-pick --abort".

------------------------------------------------DETACHED HEAD---------------------------------------------------------------------------------------------------------------
1.generall git head points to branch & its pictular latest commit 
2.when we move to pictular commit "git checkout <commit hash code>" it becomes detached head & all the further commits made here will be in detached state which is dangerous 
3.so at this point to slove/over come issue, move to latest commit in detached state & create a branch there using "git branch <new branch>" then execute "git checkout <new branch>" so that now all the commits in detached head will be pointed to this new branch
4.now go to your preffered branch lets say "git checkout master" now apply "git merge or rebase". you can apply cherry pick too
5.delete newly created branch if you feel its unnecessary.

-----------------------------------------------------------CHEKOUT-----------------------------------------------------------------------------------------------------------
git checkout -   ---> previously where the HEAD present it will move to that position
                      suppose if you move to pictular commit(in same branch) or other branch from master if you execute cmd "git checkout -" then HEAD will move to master or pervious commit which was its previous state


git checkout HEAD~2 ----> suppose you are in master branch latest commit and HEAD is also pointed to master branch latest commit. if you want to move you head to previous second commit in same master branch then execute "git checkout HEAD~2" 
                          similarly you can move to 1...or 3/4.. commmits behind using this cmd 
                          you can use "git checkout -" or "git checkout master" to move back to previous same commit in master

git checkout head <file name> ----> suppose if you have made changes in two files so that those are moved to working area now you want to revert back or remove those changes in pictular one single file then use cmd "git checkout head <file name>"
       or                           so that changes made in that file will be removed & set file into its previous commit but the other second file will be in same working area. This same cmd also used to revert back or remove the file changes which are in staging area.
git checkout -- <file name>                           
                                

git reset head --hard  ---->    if you want to revert back or remove all the changes in all files which are in working or staging area at single shot use cmd "git reset head --hard"
                                so that all the changes made on all files which are in working/staging area will be removed & set files into its previous commit 
 


git restore --source HEAD~2 <file name> ----> if you have commited a file & repo is clean, now you want to revert/apply the same changes of that file which was two commits behind (for exaple)use this cmd, so that same changes happend in behind 2 commits on that file now it will be applied on the files & keep them in present working area
                                              similarly you can apply/revert same files changes happend 1...or 3/4.. commmits behind can be applied on the files & keep them in present working area



git switch <branch name> ----> to move to another branch just like "git checkout <branch name>"

git switch -c <new branch name> ----> to create new brach & to move on it





-------------------------------------------------GIT RESET----------------------------------------------------------------------------------------------------------------------- 

Reset is of three types 
 -mixed (default)
 -soft
 -hard

suppose we have 4commits

 git log --oneline
 d56771c (HEAD -> master) forth commit added file5 [4 commit] 
 33ac4a1 third commit added file4        [3 commit]
 61e3a20 second commit added file3       [2 commit]
 54bbd34 first commit added file1,file2  [1 commit]

----mixed
 1. suppose if we apply on third commit "git reset 33ac4a1" by default git choose mixed mode 
 2. when we check "git log" we can only observe first three commit history & all the file changes made in forth commit will be deleted but kept in working area (git status)
 3. if you want to do any changes/modifications in files do it & then commit them newly with new commit msg

----soft
 1. suppose if we apply on second commit "git reset 61e3a20 --soft"  
 2. when we check "git log" we can only observe first 2 commits history & all the file changes made in third,forth commit will be deleted but kept in staging area (git status or git ls-files -s)
 3. then commit files which are in staging newly with new commit msg

----hard
 1. suppose if we apply on first commit "git reset 54bbd34 --hard" or "git reset HEAD~3 --hard"
 2. when we check "git log" we can only observe only one commit history i.e first commit history & all the file changes made in second,third,forth commits will be deleted permanently, we cannot find them any where either in staging or working area 

git reset head --hard  ----> this cmd delets the file changes whether they are in working or staging area & moves the head to previous latest commit
 
-------------------------------------------------GIT STASH----------------------------------------------------------------------------------------------------------------------- 
- When you have did some changes in files & they are in working area at that point git will not let you to switch branch when you are working on same files which exists in other branch too which you wnat to switch
- When you did changes in different files which do not exist in other branch which you wnat to switch at that point git will allow you to switch branch but the file changes made in previous branch which are in working area will be carried to the branch which you swiched currently 
- To over come this problem we use cmd "git stash"
- once you save the file chages which are in workig area into stash that changes will not be visible in workig area or when you do "cat <file>" untill you apply or pop the stash
- suppose if you stash some file changes in feature branch and move to master still you can list the saved stash on master branch & apply them on master branch using "stash apply or pop" if its necessary
- merge conflicts also arises while you apply or pop the stash, you have to fix them & commit it. once the merge conflicts are fixed generally the file changs will be in workig area that pictular file changes cannot be stashed again you have to commit/stage them
-once we do stash pop/apply the file changes will be applied & moved to working area again you cannot stash the same file changes, you have stage/commit them 




git stash ----> saves,moves the file changes which are in working area into stash list & let you to switch branch. remember each stash will be saved with unique stash id 

git stash save "<your stash comment>" ----> smilar to cmd "git stash" but you can give your own comments while saving stash 

git stash list ----> to list all the stash's we saved (stash ID's , on whcih branch we made this pictular stash & comment will be displayd) 

git stash pop ----> it will reapply the file changes which are saved in that stash list & move the files to working area but that saved stash's which are poped will be deleted from stash list (only picks recent stash by default)

git stash pop <stash id>  ----> to reapply pictular stash in the stash list & that pictular saved stash's will be deleted from stash list

git stash apply  ----> it will reapply the file changes which are saved in that stash list & move the files to working area but that saved stash's will not be deleted from stash list (only picks recent stash by default)

git stash apply <stash id>  ----> to apply pictular stash in the stash list & that pictular saved stash's will not be deleted from stash list

git stash drop  ----> to delete recent stash from stash list. remember if you delete/clear the stash, file changes saved in that stash will also be deleted & no longer applied on the files

git stash drop <stash id> ----> to delete pictular stash from stash list 

git stash clear  ----> to delete/clear all stash's from stash list. remember if you delete/clear the stash, file changes saved in that stash will also be deleted & no longer applied on the files  

git stash show -p  ----> to check/display the file changes saved in the recent stash (only picks recent stash by default)

git stash show <stash id> -p ----> to check/display the file changes saved in the pictular stash

git stash branch <new branch name> ----> creats new branch with the recent satsh data saved in stash list (only picks recent stash by default)

git stash branch <new branch name> <stash id> ----> creats new branch with the satsh data saved in that pictular stash id from stash list 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git revert 


   git log --oneline
 37fd7a2 (HEAD -> master) first line added file2 ----> first line added in file2
 f5491be added file2 ---->file2 added/created
 cce6456 first line added file1 ----> first line added in file1
 89a255b added file1   ---->file1 added/created

  ls                                   cat file1.txt                              cat file2.txt
 file1.txt  file2.txt                  1-line added in file1                      1-line added in file2
     

git revert cce6456  ---->  when we use this all the file changes made on files at that pictular commit will be removed & that files will be added to new commit 


  git log --oneline
 efda361 (HEAD -> master) Reverted comment first line added file1"  ----> new commit after reverted
 37fd7a2 first line added file2
 f5491be added file2
 cce6456 first line added file1
 89a255b added file1

   ls                                   cat file1.txt                              cat file2.txt
 file1.txt  file2.txt                                                          1-line added in file2


if you observe contents in file1.txt will be emty bcoz we added the some text "1-line added in file1"  in file1.txt at that commit "cce6456" so when we reverted to that commit file changes 
made at that pictular commit has been removed and added files to new commit (efda361)

here you can get doubt that at commit "cce6456" only file1.txt existed but not file2.txt if we revert to this commit file2.txt should not be present when we apply revert at "cce6456" git cannot delete the files only file existd at that pictular commit will be reverted and added to new commit 


generall we use revert when your repo is published in central repository then insted of using reset we use revert bcoz to avoide conflicts
reset can be used only when your repo is in local & has been not published in  central repository (github or bitbucket)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 cat file1.txt
1-line added in file1
2-line added in file1
3-line added in file1 
  
 git log --oneline  
61c808f (HEAD -> master) third line added file1
6c2329c second line added file1
c5cafb7 first line added file1
89a255b added file1


git reset --hard HEAD~1        (similary we can perform on HEAD~1..2..3..)   after moving 1 step behind "61c808f" forth commit got removed 
HEAD is now at 6c2329c second line added file1

 cat file1.txt
1-line added in file1
2-line added in file1

-------
 git log --oneline                                       again after moving 1 step behind "6c2329c" third commit got removed
6c2329c (HEAD -> master) second line added file1
c5cafb7 first line added file1
89a255b added file1

git reset --hard HEAD~1
HEAD is now at c5cafb7 irst line added file1

 cat file1.txt
1-line added in file1

---------
 git log --oneline
c5cafb7 (HEAD -> master) first line added file1
89a255b added file1


git reset --hard 61c808f                             --->now if we do hard rest to forth commit "61c808f" which got deleted previously then all lost commits (4,3) got recovered
HEAD is now at 61c808f third line added file1


 git log --oneline
61c808f (HEAD -> master) third line added file1
6c2329c second line added file1
c5cafb7 irst line added file1
89a255b added file1


 cat file1.txt
1-line added in file1
2-line added in file1
3-line added in file1


--------------------------------------------------------------------------------GIT-HUB-------------------------------------------------------------------------------------------------------

- Dont clone the remote repoistory into local where thers already an local repo existed

- git clone <git repo_url_https>  ----> to clone the repo from github/remote repo

- we can connect to github in cli using https or ssh protocol 
- if we connect to github using HTTPS every time it'll prompt you to authenticate with you github username/email & passwd, so for better purpose its recomended to use SSH


- ssh-add ~/.ssh/ashoksanem@gmail.com_sshkeys ------->
  Could not open a connection to your authentication agent

- exec ssh-agent bash -------> if we got above error run this cmd to reslove

- ssh -T git@github.com  -------> To check & authenticate your ssh creds

reffer--->https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh


---case-1

if you already have an existing repo locally now you want same git repo to host/push to your github/remote account 
1. create new github repo in your github account
2. connect your local repo (add your remote url)
3.push your local repo/changes to remote

---case-2
start from scratch
if you havent started to work on loacal repo

1. create new repo in github
2. clone it to your local pc
3. now start to do your work on cloned repo locally 
3. push your changes which are made locally to remote



git remote  ---------> to view existing configured remote repo url alias name (origin)

git remote -v  --------> to view existing configured remote repo url (display push & fetch remote url)

git remote add origin <git remote url> --------> to add git repo remote url in local, here "origin" is alias name to your remote url we can customize it to any name if you like but most of them will keep it same
                                                 when we clone a repo from github or other the default remote name setup is called "origin"

git remote rename <old remote name>  <new remote name>  --------> to rename alias name of the url

git remote remove <remote name> --------> to remove remote url & name

git push <remote url alias>  <local branch name> --------> to push local branch or commits in local branch to remote repo
            origin                master    

git push origin  <local branch name>:<remote branch name> --------> to push local branch commits to another branch in remote repo
                 (or)
git push origin  master:feature-1 --------> we can also push commits of one branch in local to another branch in remote repo, here we are pushing "master" branch commits in local to "feature-1" branch in remote
                 local   remote

git push -u <remote url alias> <branch name>   --------> this option allows you to push & to set upstream of the branch we want to push. its a link b/w your loacl branch & remote branch
                                                          once we set upstream for local branch we can just use cmd "git push" as shorthand to puch our local branch or its commits to remote 
            (or)
git push -u origin  master  -------->  here "local master" branch has been pushed & linked/upstream to "remote master" branch so that when ever we use cmd "git push" all the local master commits will be directly pushed to master in remote
             (or)
git --set-upstream-to origin <branch>  --------> works same as above

once we set upstream using -u option , when we switched to other branch let's say "feature-1" & now if you do "git push" it throws error bcoz once the upstream is set/fixed to one branch let's say master we cannot do "git push" in other branch untill we reset it to new branch using "git push origin feature-1"

git push -u origin  feature-1:master -------->  we can push & set upstream of one branch in loacl to other branch in master. Here we pushed & set upstream b/w "local feature-1" branch & "remote master" so now when ever we do "git push" in "local feature-1" branch all the commits will be pushed to "remote master" branch.
                     local    remote

git clone <remote url> -------> to clone remote repo to local

By default when we create any repo in github a empty repo will be created without any branches, but when we add "ReadME file" while creating repo in github, a branch with the name "main" consisting with one single commit will be created which also know as "master branch". 
if you want you can set any desired branch in your github repo as main/default, it can be done in settings section under Branches tab of repo.
  